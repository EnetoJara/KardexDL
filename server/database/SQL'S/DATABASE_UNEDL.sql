-- Ernesto Jara Olveda
-- SEPTIEMBRE 30, 2017
-- Model: UNEDL    Version: 7.0.0
DROP DATABASE IF EXISTS UNEDL;
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE DATABASE IF NOT EXISTS `UNEDL` DEFAULT CHARACTER SET utf8 ;
USE `UNEDL` ;

-- -----------------------------------------------------
-- Table `UNEDL`.`CARRERA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`CARRERA` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(45) NOT NULL,
  `CREADO` DATETIME NOT NULL,
  `VALIDO` VARCHAR(45) NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `NOMBRE_UNIQUE` (`NOMBRE` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`SEMESTRE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`SEMESTRE` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(45) NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `CREADO` DATETIME NOT NULL,
  `MESES` SMALLINT NOT NULL,
  `EDITADO` TIMESTAMP NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `NOMBRE_UNIQUE` (`NOMBRE` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`MATERIA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`MATERIA` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NOT NULL,
  `CREADO` DATETIME NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  `CARRERA_ID` INT NOT NULL,
  `SEMESTRE_ID` INT NOT NULL,
  PRIMARY KEY (`ID`, `CARRERA_ID`),
  INDEX `fk_MATERIA_CARRERA1_idx` (`CARRERA_ID` ASC),
  INDEX `fk_MATERIA_SEMESTRE1_idx` (`SEMESTRE_ID` ASC),
  CONSTRAINT `fk_MATERIA_CARRERA1`
    FOREIGN KEY (`CARRERA_ID`)
    REFERENCES `UNEDL`.`CARRERA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MATERIA_SEMESTRE1`
    FOREIGN KEY (`SEMESTRE_ID`)
    REFERENCES `UNEDL`.`SEMESTRE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`TURNO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`TURNO` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(45) NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `CREADO` DATETIME NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`PERSONA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`PERSONA` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(50) NOT NULL,
  `SNOMBRE` VARCHAR(50) NULL,
  `APATERNO` VARCHAR(50) NOT NULL,
  `AMATERNO` VARCHAR(50) NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `CREADO` DATETIME NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `USERNAME` VARCHAR(100) NOT NULL,
  `PSSWRD` VARCHAR(100) NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `USERNAME_UNIQUE` (`USERNAME` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`MAESTRO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`MAESTRO` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `VALIDO` VARCHAR(2) NOT NULL,
  `CREADO` DATETIME NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `PERSONA_ID` INT NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_MAESTRO_PERSONA1_idx` (`PERSONA_ID` ASC),
  CONSTRAINT `fk_MAESTRO_PERSONA1`
    FOREIGN KEY (`PERSONA_ID`)
    REFERENCES `UNEDL`.`PERSONA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`ALUMNO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`ALUMNO` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `CREADO` DATETIME NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `CARRERA_ID` INT NOT NULL,
  `PERSONA_ID` INT NOT NULL,
  `SEMESTRE_ID` INT NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  `TURNO_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_ALUMNO_CARRERA1_idx` (`CARRERA_ID` ASC),
  INDEX `fk_ALUMNO_PERSONA1_idx` (`PERSONA_ID` ASC),
  INDEX `fk_ALUMNO_SEMESTRE1_idx` (`SEMESTRE_ID` ASC),
  INDEX `fk_ALUMNO_TURNO1_idx` (`TURNO_ID` ASC),
  CONSTRAINT `fk_ALUMNO_CARRERA1`
    FOREIGN KEY (`CARRERA_ID`)
    REFERENCES `UNEDL`.`CARRERA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ALUMNO_PERSONA1`
    FOREIGN KEY (`PERSONA_ID`)
    REFERENCES `UNEDL`.`PERSONA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ALUMNO_SEMESTRE1`
    FOREIGN KEY (`SEMESTRE_ID`)
    REFERENCES `UNEDL`.`SEMESTRE` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ALUMNO_TURNO1`
    FOREIGN KEY (`TURNO_ID`)
    REFERENCES `UNEDL`.`TURNO` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`CICLOESCOLAR`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`CICLOESCOLAR` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `CODIGO` VARCHAR(45) NOT NULL,
  `FECHAINICIO` DATETIME NOT NULL,
  `FECHAFIN` DATETIME NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `CODIGO_UNIQUE` (`CODIGO` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`MAESTRO_has_MATERIA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`MAESTRO_has_MATERIA` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `MAESTRO_ID` INT NOT NULL,
  `TURNO_ID` INT NOT NULL,
  `MATERIA_ID` INT NOT NULL,
  `MATERIA_CARRERA_ID` INT NOT NULL,
  `CICLOESCOLAR_ID` INT NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL DEFAULT 'Y',
  `MODIFICADO` TIMESTAMP NOT NULL DEFAULT NOW(),
  PRIMARY KEY (`ID`),
  INDEX `fk_MAESTRO_has_MATERIA_MAESTRO1_idx` (`MAESTRO_ID` ASC),
  INDEX `fk_MAESTRO_has_MATERIA_TURNO1_idx` (`TURNO_ID` ASC),
  INDEX `fk_MAESTRO_has_MATERIA_MATERIA1_idx` (`MATERIA_ID` ASC, `MATERIA_CARRERA_ID` ASC),
  INDEX `fk_MAESTRO_has_MATERIA_CICLOESCOLAR1_idx` (`CICLOESCOLAR_ID` ASC),
  CONSTRAINT `fk_MAESTRO_has_MATERIA_MAESTRO1`
    FOREIGN KEY (`MAESTRO_ID`)
    REFERENCES `UNEDL`.`MAESTRO` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MAESTRO_has_MATERIA_TURNO1`
    FOREIGN KEY (`TURNO_ID`)
    REFERENCES `UNEDL`.`TURNO` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MAESTRO_has_MATERIA_MATERIA1`
    FOREIGN KEY (`MATERIA_ID` , `MATERIA_CARRERA_ID`)
    REFERENCES `UNEDL`.`MATERIA` (`ID` , `CARRERA_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MAESTRO_has_MATERIA_CICLOESCOLAR1`
    FOREIGN KEY (`CICLOESCOLAR_ID`)
    REFERENCES `UNEDL`.`CICLOESCOLAR` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`ALUMNO_has_MATERIA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`ALUMNO_has_MATERIA` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `ALUMNO_ID` INT NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  `MAESTRO_has_MATERIA_ID` INT NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL DEFAULT 'Y',
  `MODIFICADO` TIMESTAMP NOT NULL DEFAULT NOW(),
  PRIMARY KEY (`ID`, `ALUMNO_ID`, `MAESTRO_has_MATERIA_ID`),
  INDEX `fk_ALUMNO_has_MATERIA_ALUMNO1_idx` (`ALUMNO_ID` ASC),
  INDEX `fk_ALUMNO_has_MATERIA_MAESTRO_has_MATERIA1_idx` (`MAESTRO_has_MATERIA_ID` ASC),
  CONSTRAINT `fk_ALUMNO_has_MATERIA_ALUMNO1`
    FOREIGN KEY (`ALUMNO_ID`)
    REFERENCES `UNEDL`.`ALUMNO` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ALUMNO_has_MATERIA_MAESTRO_has_MATERIA1`
    FOREIGN KEY (`MAESTRO_has_MATERIA_ID`)
    REFERENCES `UNEDL`.`MAESTRO_has_MATERIA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`CONTROLESCOLAR`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`CONTROLESCOLAR` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `CREADO` DATETIME NOT NULL,
  `VALIDO` VARCHAR(45) NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `CARRERA_ID` INT NOT NULL,
  `PERSONA_ID` INT NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`, `CARRERA_ID`),
  INDEX `fk_CONTROLESCOLAR_CARRERA1_idx` (`CARRERA_ID` ASC),
  INDEX `fk_CONTROLESCOLAR_PERSONA1_idx` (`PERSONA_ID` ASC),
  CONSTRAINT `fk_CONTROLESCOLAR_CARRERA1`
    FOREIGN KEY (`CARRERA_ID`)
    REFERENCES `UNEDL`.`CARRERA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CONTROLESCOLAR_PERSONA1`
    FOREIGN KEY (`PERSONA_ID`)
    REFERENCES `UNEDL`.`PERSONA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`SUPERVISOR`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`SUPERVISOR` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `CREADO` DATETIME NOT NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `PERSONA_ID` INT NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_SUPERVISOR_PERSONA1_idx` (`PERSONA_ID` ASC),
  CONSTRAINT `fk_SUPERVISOR_PERSONA1`
    FOREIGN KEY (`PERSONA_ID`)
    REFERENCES `UNEDL`.`PERSONA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`CALIFICACION`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`CALIFICACION` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `PSEMESTRE` DOUBLE NOT NULL,
  `SSEMESTRE` DOUBLE NOT NULL,
  `TSEMESTR` DOUBLE NOT NULL,
  `TOTAL` DOUBLE NOT NULL,
  `PASO` SMALLINT NOT NULL,
  `SIGLAS` VARCHAR(10) NOT NULL,
  `SIGNIFICADO` VARCHAR(100) NULL,
  `VALIDO` VARCHAR(2) NOT NULL,
  `CREADO` DATETIME NOT NULL,
  `MODIFICADO` TIMESTAMP NOT NULL,
  `ALUMNO_has_MATERIA_ID` INT NOT NULL,
  `EDITOR` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ID`, `CREADO`),
  INDEX `fk_CALIFICACION_ALUMNO_has_MATERIA1_idx` (`ALUMNO_has_MATERIA_ID` ASC),
  CONSTRAINT `fk_CALIFICACION_ALUMNO_has_MATERIA1`
    FOREIGN KEY (`ALUMNO_has_MATERIA_ID`)
    REFERENCES `UNEDL`.`ALUMNO_has_MATERIA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UNEDL`.`CICLOACTUAL`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`CICLOACTUAL` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `CARRERA_ID` INT NOT NULL,
  `CICLOESCOLAR_ID` INT NOT NULL,
  `PUBLICA` SMALLINT NOT NULL DEFAULT 0,
  `RESTRINGIR` SMALLINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`, `CARRERA_ID`, `CICLOESCOLAR_ID`),
  INDEX `fk_CARRERA_has_CICLOESCOLAR_CICLOESCOLAR1_idx` (`CICLOESCOLAR_ID` ASC),
  INDEX `fk_CARRERA_has_CICLOESCOLAR_CARRERA1_idx` (`CARRERA_ID` ASC),
  CONSTRAINT `fk_CARRERA_has_CICLOESCOLAR_CARRERA1`
    FOREIGN KEY (`CARRERA_ID`)
    REFERENCES `UNEDL`.`CARRERA` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CARRERA_has_CICLOESCOLAR_CICLOESCOLAR1`
    FOREIGN KEY (`CICLOESCOLAR_ID`)
    REFERENCES `UNEDL`.`CICLOESCOLAR` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `UNEDL` ;

-- -----------------------------------------------------
-- Placeholder table for view `UNEDL`.`v_student`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UNEDL`.`v_student` (`NOMBRE` INT, `SNOMBRE` INT, `APATERNO` INT, `AMATERNO` INT, `MATRICULA` INT, `CICLO` INT, `CARRERA` INT, `SEMESTRE` INT, `TURNO` INT, `ID` INT);

-- -----------------------------------------------------
-- procedure GET_CARRERA_ID
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_CARRERA_ID` (
	IN _NOMBRE VARCHAR(100)
)
BEGIN
	SELECT C.ID FROM CARRERA AS C WHERE C.NOMBRE = _NOMBRE;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_CARRERA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_CARRERA` (
	IN _ID INT
)
BEGIN
	SELECT M.ID, M.NOMBRE, CA.CICLOESCOLAR_ID AS CICLO_ID
	FROM CARRERA AS M 
	INNER JOIN CICLOACTUAL AS CA
	ON M.ID = CA.CARRERA_ID
	WHERE M.ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_CARRERAS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_CARRERAS` ()
BEGIN
	SELECT C.ID, C.NOMBRE, C.VALIDO, C.EDITOR FROM CARRERA AS C WHERE C.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_CARRERAS_ADMIN
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_CARRERAS_ADMIN` ()
BEGIN
	SELECT C.ID, C.NOMBRE, C.VALIDO, C.EDITOR FROM CARRERA AS C;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_CICLOS_ADMIN
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_CICLOS_ADMIN` ()
BEGIN
	SELECT * FROM CICLOESCOLAR;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_MATERIA` (
	IN _ID INT
)
BEGIN
	SELECT M.ID AS MATERIA_ID, S.ID AS SEMESTRE_ID, M.NOMBRE AS NOMBRE,S.NOMBRE AS SEMESTRE FROM MATERIA AS M
	INNER JOIN SEMESTRE AS S
	ON M.SEMESTRE_ID = S.ID
	WHERE M.ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_MATERIAS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_MATERIAS` (
	IN _NOMBRE VARCHAR(45)
)
BEGIN
	SELECT M.ID, M.NOMBRE, S.NOMBRE AS SEMESTRE, C.NOMBRE AS CARRERA, M.VALIDO FROM MATERIA AS M 
	INNER JOIN SEMESTRE AS S
	ON M.SEMESTRE_ID = S.ID
	INNER JOIN CARRERA AS C
	ON M.CARRERA_ID = C.ID
	WHERE C.NOMBRE =  _NOMBRE AND S.VALIDO = 'Y' AND C.VALIDO = 'Y'
	ORDER BY S.NOMBRE;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_SEMESTRES_ADMIN
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_SEMESTRES_ADMIN` ()
BEGIN
	SELECT S.ID, S.NOMBRE, S.VALIDO, S.EDITADO, S.EDITOR
	FROM SEMESTRE AS S;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_SEMESTRES
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_SEMESTRES` ()
BEGIN
	SELECT S.ID, S.NOMBRE, S.MESES FROM SEMESTRE AS S WHERE S.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_TURNOS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_TURNOS` ()
BEGIN
	SELECT T.ID, T.NOMBRE FROM TURNO AS T WHERE T.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_USUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_USUARIO` (
	IN _USERNAME VARCHAR(100)
)
BEGIN
	SELECT P.ID AS ID,(
	CASE WHEN A.ID IS NOT NULL
		THEN A.ID
	WHEN M.ID IS NOT NULL
    THEN M.ID
    WHEN S.ID IS NOT NULL
    THEN S.ID
    WHEN C.ID IS NOT NULL
    THEN C.ID
    END
) AS ROLE_ID, P.NOMBRE, P.USERNAME AS USUARIO, (
	CASE WHEN A.ID IS NOT NULL 
		THEN "ALUMNO"
	WHEN M.ID IS NOT NULL
        THEN "MAESTRO"
	WHEN S.ID IS NOT NULL
		THEN "ADMIN"
	WHEN C.ID IS NOT NULL
		THEN "CONTROLESCOLAR"
	END
 )AS ROLE, (
     CASE WHEN CA.NOMBRE IS NOT NULL THEN CA.NOMBRE
				WHEN CA1.NOMBRE IS NOT NULL THEN CA1.NOMBRE END
    ) AS CARRERA,
    ( CASE WHEN CA.ID IS NOT NULL THEN CA.ID
		WHEN CA1.ID IS NOT NULL THEN CA1.ID END
    ) AS CARRERA_ID, P.PSSWRD
FROM PERSONA AS P
LEFT JOIN ALUMNO AS A
ON P.ID = A.PERSONA_ID
LEFT JOIN CARRERA AS CA
ON A.CARRERA_ID = CA.ID
LEFT JOIN SUPERVISOR AS S
ON P.ID = S.PERSONA_ID
LEFT JOIN MAESTRO AS M
ON P.ID = M.PERSONA_ID
LEFT JOIN CONTROLESCOLAR AS C
ON P.ID = C.PERSONA_ID
LEFT JOIN CARRERA AS CA1
ON C.CARRERA_ID = CA1.ID
WHERE P.USERNAME = _USERNAME AND P.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ACTIVAR_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_ACTIVAR_MATERIA` (
	IN _ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE MATERIA SET VALIDO = 'Y', EDITOR = _EDITOR, MODIFICADO = NOW()
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ACTIVAR_USER
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_ACTIVAR_USER` (
    IN _MATRICULA VARCHAR(100),
    IN _EDITOR VARCHAR(100),
    IN _TIPO SMALLINT
)
BEGIN
	DECLARE P_ID INT;

    SELECT ID INTO P_ID FROM PERSONA WHERE USERNAME = _MATRICULA;
    -- ALUMNO
    IF _TIPO = 1
    THEN
		UPDATE ALUMNO SET VALIDO = 'Y', EDITOR = _EDITOR, MODIFICADO = NOW() WHERE PERSONA_ID = P_ID;
		UPDATE PERSONA SET VALIDO = 'Y', EDITOR = _EDITOR, MODIFICADO = NOW() WHERE ID = P_ID;
	-- MAESTRO
    ELSEIF _TIPO = 2
    THEN
		UPDATE MAESTRO SET VALIDO = 'Y', EDITOR = _EDITOR, MODIFICADO = NOW() WHERE PERSONA_ID = P_ID;
		UPDATE PERSONA SET VALIDO = 'Y', EDITOR = _EDITOR, MODIFICADO = NOW() WHERE ID = P_ID;
	-- CONTROL ESCOLAR
    ELSEIF _TIPO = 3
    THEN
		UPDATE CONTROLESCOLAR SET VALIDO = 'Y', EDITOR = _EDITOR, MODIFICADO = NOW() WHERE PERSONA_ID = P_ID;
		UPDATE PERSONA SET VALIDO = 'Y', EDITOR = _EDITOR, MODIFICADO = NOW() WHERE ID = P_ID;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ACTUALIZAR_CARRERA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_ACTUALIZAR_CARRERA` (
	IN _ID INT,
    IN _NOMBRE VARCHAR(100),
    IN _EDITOR VARCHAR(100),
    IN _CICLO INT
)
BEGIN
	UPDATE CARRERA SET NOMBRE = _NOMBRE, EDITOR = _EDITOR WHERE ID = _ID;
    UPDATE CICLOACTUAL SET CICLOESCOLAR_ID = _CICLO WHERE CARRERA_ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_CALIFICACION
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_CALIFICACION` (
	IN _ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE CALIFICACION SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_CARRERA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_CARRERA` (
	IN _ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE CARRERA SET VALIDO = 'N', EDITOR = _EDITOR
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_CICLOESCOLAR
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_CICLOESCOLAR` (
    IN _ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE CICLOESCOLAR SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_MATERIA` (
	IN _ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE MATERIA SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_SEMESTRE
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_SEMESTRE` (
	IN _ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE SEMESTRE SET VALIDO = 'Y', EDITOR = _EDITOR, EDITADO = NOW()
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_TURNO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_TURNO` (
	IN _ID INT,
    IN _EDITOR VARCHAR(10)
)
BEGIN
	UPDATE TURNO SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW()
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_USER
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_USER` (
	IN _USERNAME VARCHAR(100),
    IN _EDITOR VARCHAR(100),
    IN _TIPO INT
)
BEGIN
	DECLARE _PERSONA_ID INT;
    SELECT ID INTO _PERSONA_ID FROM PERSONA WHERE USERNAME = _USERNAME;
    -- ALUMNO
    IF _TIPO = 1
	THEN
		UPDATE ALUMNO SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW()
		WHERE PERSONA_ID = _PERSONA_ID;
    -- MESTRO
    ELSEIF _TIPO = 2
    THEN
		UPDATE MAESTRO SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW()
        WHERE PERSONA_ID = _PERSONA_ID;
	ELSEIF _TIPO = 3
    THEN
		UPDATE CONTROLESCOLAR SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW()
        WHERE PERSONA_ID = _PERSONA_ID;
    END IF;

    UPDATE PERSONA SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW() WHERE ID = _PERSONA_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_USUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_USUARIO` (
	IN _ID INT,
    IN _USER VARCHAR(20),
    IN _EDITOR VARCHAR(100)
)
BEGIN
	DECLARE ID_USER INT;
	IF _USER = 'ALUMNO'
		THEN 
			UPDATE ALUMNO SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW()
			WHERE ID = _ID;
            
           SET ID_USER = (SELECT A.PERSONA_ID FROM ALUMNO AS A WHERE A.ID = _ID);
           
           UPDATE PERSONA SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
           WHERE ID = ID_USER_ID;
	ELSEIF _USER = 'CONTROLESCOLAR'
		THEN
			UPDATE CONTROLESCOLAR SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
			WHERE ID = _ID;
            
            SET ID_USER = (SELECT C.PERSONA_ID FROM CONTROLESCOLAR AS C WHERE C.ID = _ID);
            
            UPDATE PERSONA SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
            WHERE ID = ID_USER_ID;
	ELSEIF _USER = 'MAESTRO'
		THEN
			UPDATE MAESTRO SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW()
            WHERE ID = _ID;
            
            SET ID_USER = (SELECT M.PERSONA_ID FROM MAESTRO AS M WHERE M.ID = _ID);
            
            UPDATE PERSONA SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
            WHERE ID = ID_USER_ID;
	ELSEIF _USER = 'ADMIN'
		THEN
			UPDATE SUPERVISOR SET VALIDO = 'N', EDITOR = _EDITOR, MODIFICADO = NOW()
            WHERE ID = _ID;
            
            SET ID_USER = (SELECT S.PERSONA_ID FROM SUPERVISOR AS S WHERE S.ID = _ID);
            
            UPDATE PERSONA SET VALIDO = 'N', MODIFICADO = NOW(), EDITOR = _EDITOR
            WHERE ID = ID_USER_ID;
	END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_USER
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_GET_USER` (
	IN _MATRICULA VARCHAR(100),
    IN _TIPO SMALLINT
)
BEGIN
IF _TIPO = 1 -- ALUMNO
    THEN
    SELECT P.ID AS P_ID, A.ID AS A_ID, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO, P.VALIDO,
    P.USERNAME AS MATRICULA, A.CARRERA_ID, A.SEMESTRE_ID, A.TURNO_ID
    FROM PERSONA AS P
    INNER JOIN ALUMNO AS A
    ON P.ID = A.PERSONA_ID
WHERE P.USERNAME = _MATRICULA;
	ELSEIF _TIPO = 2 -- MAESTRO
	THEN
		SELECT P.ID AS P_ID, M.ID AS A_ID, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO, P.VALIDO,
    P.USERNAME AS MATRICULA FROM PERSONA AS P
		INNER JOIN MAESTRO AS M
		ON P.ID = M.PERSONA_ID
		WHERE P.USERNAME = _MATRICULA;
	ELSEIF _TIPO = 3 -- CONTROL ESCOLAR
    THEN
		SELECT P.ID AS P_ID, C.ID AS A_ID, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO, P.VALIDO,
    P.USERNAME AS MATRICULA FROM PERSONA AS P
		INNER JOIN CONTROLESCOLAR AS C
		ON P.ID = C.PERSONA_ID
		WHERE P.USERNAME = _MATRICULA;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_ALUMNO_HAS_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_ALUMNO_HAS_MATERIA` (
	IN _ALUMNO_ID INT,
    IN _MATERIA_ID INT,
    IN _MAESTRO_ID INT,
    IN _TURNO_ID INT,
    IN _CICLOESCOLAR_ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	INSERT INTO ALUMNO_has_MATERIA(ALUMNO_ID,MATERIA_ID,MAESTRO_ID,TURNO_ID,CICLOESCOLAR_ID,EDITOR)
    VALUES(
    _ALUMNO_ID,
    _MATERIA_ID,
    _MAESTRO_ID,
    _TURNO_ID,
    _CICLOESCOLAR_ID,
    _EDITOR
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_CALIFICACION
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_CALIFICACION` (
	IN _PSEMESTRE DOUBLE,
    IN _SSEMESTRE DOUBLE,
    IN _TSEMESTRE DOUBLE,
    IN _TOTAL DOUBLE,
    IN _PASO SMALLINT,
    IN _SIGLAS VARCHAR(10),
    IN _SIGNIFICADO VARCHAR(100),
    IN _VALIDO VARchar(2),
    IN _ALUMNO_has_MATERIA_ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	INSERT INTO CALIFICACION(PSEMESTRE,SSEMESTRE,PSEMESTRE,TOTAL,SIGLAS,SIGNIFICADO,VALIDO,CREADO,MODIFICADO,ALUMNO_has_MATERIA_ID,EDITO)
    VALUES(
    _PSEMESTRE,
    _SSEMESTRO,
    _TSEMESTRE,
    _TOTAL,
    _PASO,
    _SIGLAS,
    _SIGNIFICADO,
    'Y',
    NOW(),
    NOW(),
    _ALUMNO_has_MATERIA_ID,
    _EDITOR
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_CARRERA_has_MAESTRO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_CARRERA_has_MAESTRO` (
	IN _CARRERA_ID INT,
    IN _MAESTRO_ID INT
)
BEGIN
	INSERT INTO CARRERA_has_MAESTRO(CARRERA_ID,MAESTRO_ID,VALIDO)
    VALUES(_CARRERA_ID,_MAESTRO_ID,'Y');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_CARRERA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_CARRERA` (
	IN _NOMBRE VARCHAR(45),
    IN _EDITOR VARCHAR(100),
    IN _CICLO INT
)
BEGIN
	DECLARE LID INT;
    
	INSERT INTO CARRERA(NOMBRE,CREADO,VALIDO,EDITOR)
    VALUES(
    _NOMBRE,
    NOW(),
    'Y',
    _EDITOR
    );
    SET LID = LAST_INSERT_ID();
    INSERT INTO CICLOACTUAL(CARRERA_ID, CICLOESCOLAR_ID)
    VALUES (LID, _CICLO);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_CODIGO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_CODIGO` (
    IN _CODIGO VARCHAR(45),
    IN _FECHAINICIO DATETIME,
    IN _FECHAFIN DATETIME,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	INSERT INTO CICLOESCOLAR(CODIGO,FECHAINICIO,FECHAFIN,VALIDO,MODIFICADO,EDITOR)
    VALUES(_CODIGO,_FECHAINICIO,_FECHAFIN,'Y',NOW(),_EDITOR);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_MATERIA` (
	IN _NOMBRE VARCHAR(100),
    IN _CARRERA_ID INT,
    IN _SEMESTRE_ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
    DECLARE NUM INT;
    SELECT COUNT(*) INTO NUM FROM MATERIA WHERE NOMBRE = _NOMBRE AND CARRERA_ID = _CARRERA_ID;

    IF NUM <= 0
    THEN
	INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
    VALUES(
    _NOMBRE,
    NOW(),
    NOW(),
    'Y',
    _CARRERA_ID,
    _SEMESTRE_ID,
    _EDITOR
    );
    ELSE
    SELECT NUM;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_SEMESTRE
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_SEMESTRE` (
	IN _NOMBRE VARCHAR(45),
    IN _MESES SMALLINT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	INSERT INTO SEMESTRE(NOMBRE, VALIDO, CREADO, MESES, EDITADO, EDITOR)
    VALUES(_NOMBRE, 'Y', NOW(), _MESES, NOW(), _EDITOR);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_TURNO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_TURNO` (
	IN _NOMBRE VARCHAR(45),
    IN _EDITOR VARCHAR(100)
)
BEGIN
	INSERT INTO TURNO(NOMBRE,VALIDO,CREADO,MODIFICADO,EDITOR)
    VALUES(_NOMBRE,'Y',NOW(),NOW(),_EDITOR);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_USUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_USUARIO`(
	IN _NOMBRE VARCHAR(50),
    IN _SNOMBRE VARCHAR(50),
    IN _APATERNO VARCHAR(50),
    IN _AMATERNO VARCHAR(50),
    IN _USERNAME VARCHAR(100),
    IN _PSSWRD VARCHAR(100),
    IN _CARRERA_ID INT,
    IN _TIPOUSER VARCHAR(20),
    IN _SEMESTRE_ID INT,
    IN _TURNO_ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN

    DECLARE LID INT;

	INSERT INTO PERSONA(NOMBRE,SNOMBRE,APATERNO,AMATERNO,VALIDO,CREADO,MODIFICADO,USERNAME,PSSWRD,EDITOR)
    VALUES (_NOMBRE,_SNOMBRE,_APATERNO,_AMATERNO,'Y', NOW(),NOW(),_USERNAME,_PSSWRD,_EDITOR);

    SET LID = LAST_INSERT_ID();

    IF _TIPOUSER = 'ALUMNO'
    THEN
		INSERT INTO ALUMNO(CREADO,VALIDO,MODIFICADO,CARRERA_ID,PERSONA_ID,SEMESTRE_ID,EDITOR,TURNO_ID)
        VALUES (NOW(),'Y',NOW(),_CARRERA_ID,LID,_SEMESTRE_ID,_EDITOR,_TURNO_ID);
	ELSEIF _TIPOUSER = 'MAESTRO'
    THEN 
		INSERT INTO MAESTRO(CREADO,VALIDO,MODIFICADO,PERSONA_ID,EDITOR)
		VALUES (NOW(),'Y',NOW(),LID, _EDITOR);
	ELSEIF _TIPOUSER = 'CONTROLESCOLAR'
		THEN
			INSERT INTO CONTROLESCOLAR(CREADO,VALIDO,MODIFICADO,PERSONA_ID,EDITOR,CARRERA_ID)
		VALUES (NOW(),'Y',NOW(),LID,_EDITOR,_CARRERA_ID);
    ELSEIF _TIPOUSER = 'ADMIN'
		THEN
        INSERT INTO SUPERVISOR(CREADO,VALIDO,MODIFICADO,PERSONA_ID,EDITOR)
			VALUES (NOW(),'Y',NOW(),LID,_EDITOR);
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_LIST_ALUMNOS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_LIST_ALUMNOS` (
    IN _CARRERA_ID INT,
    IN _TURNO_ID INT,
    IN _SEMESTRE INT
)
BEGIN
	SELECT A.VALIDO, P.USERNAME AS MATRICULA, P.NOMBRE, P.SNOMBRE AS SEGUNDO_NOMBRE, P.APATERNO AS PATERNO,
	P.AMATERNO AS MATERNO, S.NOMBRE AS SEMESTRE FROM PERSONA AS P
	INNER JOIN ALUMNO AS A
	ON P.ID = A.PERSONA_ID
    INNER JOIN SEMESTRE AS S
    ON A.SEMESTRE_ID = S.ID
	WHERE A.CARRERA_ID = _CARRERA_ID AND A.TURNO_ID = _TURNO_ID AND A.SEMESTRE_ID = _SEMESTRE AND P.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_UPDATE_CARRERA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_UPDATE_CARRERA` (
	IN _ID INT,
    IN _VALIDO VARCHAR(2),
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE CARRERA SET VALIDO = _VALIDO, EDITOR = _EDITOR
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_UPDATE_CICLO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_UPDATE_CICLO` (
	IN _ID INT,
    IN _VALIDO VARCHAR(2),
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE CICLOESCOLAR SET VALIDO = _VALIDO, EDITOR = _EDITOR, MODIFICADO = NOW()
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_UPDATE_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_UPDATE_MATERIA` (
	IN _ID INT,
    IN _NOMBRE VARCHAR(100),
    IN _CARRERA_ID INT,
    IN _SEMESTRE_ID INT,
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE MATERIA SET NOMBRE = _NOMBRE, CARRERA_ID = _CARRERA_ID, SEMESTRE_ID = _SEMESTRE_ID, EDITOR = _EDITOR,
    MODIFICADO = NOW()
    WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_UPDATE_USER
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_UPDATE_USER` (
	IN _P_ID INT,
	IN _A_ID INT,
	IN _NOMBRE VARCHAR(50),
	IN _SEGUNDO VARCHAR(50),
	IN _PATERNO VARCHAR(50),
	IN _MATERNO VARCHAR(50),
	IN _SEMESTRE INT,
	IN _TURNO INT,
	IN _CONFIRMAR VARCHAR(100),
	IN _CARRERA_ID INT,
	IN _EDITOR VARCHAR(100),
	IN _TIPO INT
)
BEGIN
	UPDATE PERSONA SET NOMBRE = _NOMBRE, SNOMBRE = _SEGUNDO, APATERNO = _PATERNO,
	AMATERNO = _MATERNO, MODIFICADO = NOW(), PSSWRD = _CONFIRMAR, EDITOR = _EDITOR
	WHERE ID = _P_ID;

    IF _TIPO = 1 -- ALUMNO
    THEN
		UPDATE ALUMNO SET MODIFICADO = NOW(), EDITOR = _EDITOR,
        CARRERA_ID = _CARRERA_ID, SEMESTRE_ID = _SEMESTRE
        WHERE PERSONA_ID = _P_ID AND ID = _A_ID;
	ELSEIF _TIPO = 2 -- MAESTRO
    THEN
		UPDATE MAESTRO SET MODIFICADO = NOW(), EDITOR = _EDITOR
        WHERE PERSONA_ID = _P_ID AND ID = _A_ID;
	ELSEIF _tipo = 3 -- CONTROL ESCOLAR
    THEN
		UPDATE CONTROLESCOLAR SET MODIFICADO = NOW(), EDITOR = _EDITOR
        WHERE PERSONA_ID = _P_ID AND ID = _A_ID;
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UPDATE_PASSWORD_USUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `UPDATE_PASSWORD_USUARIO` (
    IN _PERSONA_ID INT,
    IN _ROLE_ID INT,
    IN _NEWPSSWRD VARCHAR(100),
    IN _EDITOR VARCHAR(100),
    IN _TIPOUSER VARCHAR(30)
)
BEGIN
	UPDATE PERSONA SET PSSWRD = _NEWPSSWRD, EDITOR = _EDITOR, MODIFICADO = NOW()
    WHERE ID = _PERSONA_ID;
    
    IF _TIPOUSER = 'ADMIN'
		THEN UPDATE SUPERVISOR SET EDITOR = _EDITOR, MODIFICADO = NOW()
		WHERE ID = _ROLE_ID AND PERSONA_ID = _PERSONA_ID;
    ELSEIF _TIPOUSER = 'ALUMNO'
		THEN UPDATE ALUMNO SET MODIFICADO = NOW(), EDITOR = _EDITOR
        WHERE ID = _ROLE_ID AND PERSONA_ID = _PERSONA_ID;
	ELSEIF _TIPOUSER = 'MAESTRO'
		THEN UPDATE MAESTRO SET MODIFICADO = NOW(), EDITOR = _EDITOR
        WHERE ID = _ROLE_ID AND PERSONA_ID = _PERSONA_ID;
	ELSEIF _TIPOUSER = 'CONTROL'
		THEN UPDATE CONTROLESCOLAR SET MODIFICADO = NOW(), EDITOR = _EDITOR
        WHERE ID = _ROLE_ID AND PERSONA_ID = _PERSONA_ID;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_MAESTROS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_MAESTROS`(
	IN _MATRICULA VARCHAR(100),
    IN _NOMBRE VARCHAR(50),
    IN _APELLIDO VARCHAR(50)
)
BEGIN
	IF _MATRICULA IS NOT NULL AND _APELLIDO IS NOT NULL
    THEN
		SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN MAESTRO AS M
		ON P.ID = M.PERSONA_ID
		WHERE P.USERNAME LIKE _MATRICULA AND P.NOMBRE LIKE _NOMBRE AND P.APATERNO LIKE _APELLIDO;
    ELSEIF _MATRICULA IS NULL AND _APELLIDO IS NOT NULL
    THEN
		SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN MAESTRO AS M
		ON P.ID = M.PERSONA_ID
		WHERE P.NOMBRE LIKE _NOMBRE AND P.APATERNO LIKE _APELLIDO;
    ELSEIF _MATRICULA IS NOT NULL AND _APELLIDO IS NULL
	THEN
		SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN MAESTRO AS M
		ON P.ID = M.PERSONA_ID
		WHERE P.USERNAME LIKE _MATRICULA AND P.NOMBRE LIKE _NOMBRE;
	ELSE
    SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN MAESTRO AS M
		ON P.ID = M.PERSONA_ID
		WHERE P.NOMBRE LIKE _NOMBRE;
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_MAESTRO_ID
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_GET_MAESTRO_ID` (
	IN _MATRICULA VARCHAR(100)
)
BEGIN
	SELECT P.ID AS P_ID, M.ID AS M_ID, P.USERNAME AS MATRICULA,
    CONCAT(P.NOMBRE,' ', P.APATERNO, ' ', P.AMATERNO) AS NOMBRE
	FROM PERSONA AS P
	INNER JOIN MAESTRO AS M
	ON P.ID = M.PERSONA_ID
	WHERE P.USERNAME = _MATRICULA;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_MATERIAS_POR_SEMESTRE
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_GET_MATERIAS_POR_SEMESTRE`(
	IN SEMESTRE INT,
    IN CARRERA INT,
    IN TURNO INT
)
BEGIN
	SELECT M.ID, M.NOMBRE FROM MATERIA AS M
	LEFT OUTER JOIN (
    SELECT * FROM MAESTRO_HAS_MATERIA WHERE VALIDO = 'Y'
    )AS MHM
	ON M.CARRERA_ID = MHM.MATERIA_CARRERA_ID AND 
	M.ID = MHM.MATERIA_ID AND MHM.TURNO_ID = TURNO
	WHERE MHM.MATERIA_ID IS NULL AND MHM.MATERIA_CARRERA_ID IS NULL
    AND M.CARRERA_ID = CARRERA AND M.SEMESTRE_ID = SEMESTRE AND M.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_NOTA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_NOTA`(
	IN _A_ID INT,
    IN _CARRRER_ID INT,
    IN _CICLOESCOLAR_ID INT,
    IN _EDITOR VARCHAR(100),
    IN _MAESTRO_ID INT,
    IN _MATERIA_ID INT,
    IN _PASO SMALLINT,
    IN _PSEMESTRE DOUBLE,
    IN _SIGLAS VARCHAR(10),
    IN _SIGNIFICADO VARCHAR(100),
    IN _SSEMESTRE DOUBLE,
    IN _TSEMESTRE DOUBLE,
    IN _TURNO_ID INT,
    IN _TOTAL DOUBLE
)
BEGIN
	DECLARE LID INT;
    
	INSERT INTO ALUMNO_has_MATERIA(ALUMNO_ID, EDITOR, MAESTRO_has_MATERIA_ID)
    VALUES (_A_ID,EDITOR, _MAESTRO_ID);
    
    SET LID = LAST_INSERT_ID();
    
    INSERT INTO CALIFICACION (PSEMESTRE, SSEMESTRE, TSEMESTR, TOTAL, PASO, SIGLAS, SIGNIFICADO, VALIDO, CREADO, MODIFICADO, ALUMNO_HAS_MATERIA_ID, EDITOR)
    VALUES(_PSEMESTRE, _SSEMESTRE, _TSEMESTRE, _TOTAL, _PASO, _SIGLAS, _SIGNIFICADO, 'Y', NOW(), NOW(), LID, _EDITOR);
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERT_MAESTRO_HAS_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_INSERT_MAESTRO_HAS_MATERIA` (
	IN MAESTRO INT,
    IN TURNO INT,
    IN MATERIA INT,
    IN CARRERA INT,
    IN CICLO_ID INT
)
BEGIN
	INSERT INTO MAESTRO_has_MATERIA(MAESTRO_ID, TURNO_ID, MATERIA_ID, MATERIA_CARRERA_ID, CICLOESCOLAR_ID)
    VALUES (MAESTRO, TURNO, MATERIA, CARRERA, CICLO_ID);
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_MATERIAS_POR_MAESTRO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_GET_MATERIAS_POR_MAESTRO` (
	IN MAESTRO INT,
    IN CARRERA INT
)
BEGIN
	SELECT M.ID, M.NOMBRE, MHM.ID AS MHM_ID, T.NOMBRE AS TURNO, S.NOMBRE AS SEMESTRE
	FROM MATERIA AS M
	INNER JOIN MAESTRO_HAS_MATERIA AS MHM
	ON M.ID = MHM.MATERIA_ID AND M.CARRERA_ID = MHM.MATERIA_CARRERA_ID
	INNER JOIN TURNO AS T
	ON MHM.TURNO_ID = T.ID
	INNER JOIN SEMESTRE AS S
	ON M.SEMESTRE_ID =S.ID
	WHERE MHM.MAESTRO_ID = MAESTRO AND M.CARRERA_ID = CARRERA AND MHM.VALIDO = 'Y';
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_QUITAR_MATERIA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_QUITAR_MATERIA` (
	IN TARGET INT 
)
BEGIN
	UPDATE MAESTRO_has_MATERIA SET VALIDO = 'N' WHERE ID = TARGET;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ASIGNAR_NOTA
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_ASIGNAR_NOTA`(
	IN _MAESTRO INT,
    IN _MATERIA INT,
    IN _TURNO INT
)
BEGIN
	SELECT A.ID, P.USERNAME AS MATRICULA,M.NOMBRE AS MATERIA, MHM.MATERIA_ID,
(CASE WHEN P.AMATERNO IS NOT NULL 
	THEN CONCAT(P.NOMBRE,' ',P.APATERNO,' ',P.AMATERNO)
    ELSE CONCAT(P.NOMBRE,' ',P.APATERNO) END
) AS NOMBRE,A.TURNO_ID, A.SEMESTRE_ID, A.CARRERA_ID AS CARRERA, S.NOMBRE AS SEMESTRE,
T.NOMBRE AS TURNO,CA.CICLOESCOLAR_ID AS CICLO_ID, MHM.ID AS MHM_ID
 FROM PERSONA AS P
INNER JOIN ALUMNO AS A ON P.ID = A.PERSONA_ID
INNER JOIN SEMESTRE AS S ON A.SEMESTRE_ID = S.ID
INNER JOIN TURNO AS T ON A.TURNO_ID = T.ID
INNER JOIN MATERIA AS M ON A.SEMESTRE_ID = M.SEMESTRE_ID
INNER JOIN MAESTRO_HAS_MATERIA AS MHM ON M.ID = MHM.MATERIA_ID AND M.CARRERA_ID = MHM.MATERIA_CARRERA_ID
INNER JOIN CICLOACTUAL AS CA ON M.CARRERA_ID = CA.CARRERA_ID
WHERE MHM.MAESTRO_ID=_MAESTRO AND MHM.ID =_MATERIA AND MHM.TURNO_ID = _TURNO AND A.TURNO_ID =_TURNO AND A.VALIDO = 'Y';
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_CICLOS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_GET_CICLOS` ()
BEGIN
	SELECT * FROM CICLOESCOLAR 
    WHERE VALIDO = 'Y' ORDER BY ID DESC LIMIT 4;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_LIST_MATERIAS_MAESTRO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_LIST_MATERIAS_MAESTRO` (
	IN _CARRERA INT,
    IN _MAESTRO INT
)
BEGIN
	SELECT MHM.ID, M.NOMBRE AS MATERIA, T.NOMBRE AS TURNO, S.NOMBRE AS SEMESTRE, C.NOMBRE AS CARRERA,
    T.ID AS TURNO_ID
FROM MAESTRO_has_MATERIA AS MHM
INNER JOIN MATERIA AS M
ON MHM.MATERIA_ID = M.ID AND MHM.MATERIA_CARRERA_ID = M.CARRERA_ID
INNER JOIN TURNO AS T
ON MHM.TURNO_ID = T.ID
INNER JOIN SEMESTRE AS S
ON M.SEMESTRE_ID = S.ID
INNER JOIN CARRERA AS C
ON M.CARRERA_ID = C.ID
WHERE C.ID = _CARRERA AND MHM.MAESTRO_ID = _MAESTRO AND MHM.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_CICLOS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_CICLOS` ()
BEGIN
	SELECT C.ID, C.CODIGO AS NOMBRE FROM CICLOESCOLAR AS C WHERE C.VALIDO = 'Y';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_EDIT_NOTAS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_EDIT_NOTAS` (
	IN _ID INT,
    IN _MAESTRO INT
)
BEGIN
SELECT C.ID AS CALIFICACION_ID, P.USERNAME AS MATRICULA, 
(CASE WHEN P.AMATERNO IS NOT NULL 
THEN CONCAT(P.NOMBRE,' ',P.APATERNO,' ', P.AMATERNO)
ELSE CONCAT(P.NOMBRE,' ',P.APATERNO ) END) AS NOMBRE, 
C.PSEMESTRE, C.SSEMESTRE, C.TSEMESTR, C.PASO, C.SIGLAS, C.SIGNIFICADO, CAC.CICLOESCOLAR_ID AS CICLO_ID,
MATERIA.NOMBRE AS MATERIA, T.NOMBRE AS TURNO, SEMESTRE.NOMBRE AS SEMESTRE, C.TOTAL
FROM CALIFICACION AS C
INNER JOIN ALUMNO_HAS_MATERIA AS AHM ON C.ALUMNO_HAS_MATERIA_ID = AHM.ID
INNER JOIN ALUMNO AS A ON AHM.ALUMNO_ID = A.ID
INNER JOIN PERSONA AS P ON A.PERSONA_ID = P.ID
INNER JOIN MAESTRO_HAS_MATERIA AS MHM ON AHM.MAESTRO_HAS_MATERIA_ID = MHM.ID
INNER JOIN CICLOACTUAL AS CAC ON MHM.MATERIA_CARRERA_ID = CAC.CARRERA_ID
INNER JOIN MATERIA ON MHM.MATERIA_ID = MATERIA.ID
INNER JOIN TURNO AS T ON MHM.TURNO_ID = T.ID
INNER JOIN SEMESTRE ON A.SEMESTRE_ID = SEMESTRE.ID
WHERE MHM.ID = _ID AND MHM.MAESTRO_ID = _MAESTRO;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_UPDATE_NOTE
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_UPDATE_NOTE`(
	IN _CALIFICACION_ID INT,
    IN _PSEMESTRE DOUBLE,
    IN _SSEMESTRE DOUBLE,
    IN _TSEMESTRE DOUBLE,
    IN _TOTAL DOUBLE,
    IN _PASO SMALLINT,
    IN _SIGLAS VARCHAR(10),
    IN _SIGNIFICADO VARCHAR(100),
    IN _EDITOR VARCHAR(100)
)
BEGIN
	UPDATE CALIFICACION SET 
    PSEMESTRE = _PSEMESTRE, SSEMESTRE = _SSEMESTRE,
    TSEMESTR = _TSEMESTRE, TOTAL = _TOTAL, 
    PASO = _PASO, SIGLAS = _SIGLAS, SIGNIFICADO = _SIGNIFICADO,
    EDITOR = _EDITOR, MODIFICADO = NOW()
    WHERE ID = _CALIFICACION_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_VER_ASIGNACIONES
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_VER_ASIGNACIONES` (
	IN _CARRERA INT,
    IN _TURNO INT,
    IN _SEMESTRE INT,
    IN _CICLO INT
)
BEGIN
	SELECT MHM.ID,
	(CASE WHEN P.AMATERNO IS NOT NULL 
		THEN CONCAT(P.NOMBRE,' ',P.APATERNO,' ',P.AMATERNO)
		ELSE CONCAT(P.NOMBRE,' ',P.APATERNO) END
	) AS NOMBRE, M.NOMBRE AS MATERIA, T.ID AS TURNO_ID, T.NOMBRE AS TURNO,
	S.NOMBRE AS SEMESTRE
	FROM MATERIA AS M
	INNER JOIN CARRERA AS C ON M.CARRERA_ID = C.ID
	INNER JOIN SEMESTRE AS S ON M.SEMESTRE_ID = S.ID
	INNER JOIN MAESTRO_has_MATERIA AS MHM ON M.ID = MHM.MATERIA_ID AND M.CARRERA_ID = MHM.MATERIA_CARRERA_ID
	INNER JOIN MAESTRO AS MA ON MHM.MAESTRO_ID = MA.ID
	INNER JOIN PERSONA AS P ON MA.PERSONA_ID = P.ID
	INNER JOIN TURNO AS T ON MHM.TURNO_ID = T.ID
	WHERE MHM.TURNO_ID = _TURNO AND MHM.VALIDO = 'Y' AND MHM.MATERIA_CARRERA_ID = _CARRERA AND M.SEMESTRE_ID =_SEMESTRE AND MHM.CICLOESCOLAR_ID = _CICLO;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GET_CICLO_ACTUAL
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `GET_CICLO_ACTUAL` (
	IN _ID INT 
)
BEGIN
SELECT CI.ID, CI.CODIGO FROM CICLOACTUAL AS CA
INNER JOIN CARRERA AS C ON CA.CARRERA_ID = C.ID
INNER JOIN CICLOESCOLAR AS CI ON CA.CICLOESCOLAR_ID = CI.ID
WHERE C.ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_VER_CALIFICACION
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_VER_CALIFICACION` (
	IN _ID INT
)
BEGIN
SELECT C.PSEMESTRE, C.SSEMESTRE, C.TSEMESTR,
(CASE WHEN C.PASO = 0 THEN 'NO' ELSE 'SI' END) AS PASO, C.SIGLAS, C.SIGNIFICADO, C.TOTAL,
(CASE WHEN P.AMATERNO IS NOT NULL 
THEN CONCAT(P.NOMBRE,' ',P.APATERNO,' ',P.AMATERNO)
ELSE CONCAT(P.NOMBRE,' ',P.APATERNO) END
) AS MAESTRO,P.USERNAME AS NUM_MAESTRO,
(CASE WHEN P1.AMATERNO IS NOT NULL 
THEN CONCAT(P1.NOMBRE,' ',P1.APATERNO,' ',P1.AMATERNO)
ELSE CONCAT(P1.NOMBRE,' ',P1.APATERNO) END
) AS ALUMNO, P1.USERNAME AS MATRICULA, CI.CODIGO AS CICLO,
MATERIA.NOMBRE AS MATERIA
FROM CALIFICACION AS C
INNER JOIN ALUMNO_has_MATERIA AS AHM ON C.ALUMNO_has_MATERIA_ID = AHM.ID
INNER JOIN MAESTRO_HAS_MATERIA AS MHM ON AHM.MAESTRO_has_MATERIA_ID = MHM.ID
INNER JOIN MAESTRO AS M ON MHM.MAESTRO_ID = M.ID
INNER JOIN PERSONA AS P ON M.PERSONA_ID = P.ID
INNER JOIN ALUMNO AS A ON AHM.ALUMNO_ID = A.ID
INNER JOIN PERSONA AS P1 ON A.PERSONA_ID = P1.ID
INNER JOIN CICLOESCOLAR AS CI ON MHM.CICLOESCOLAR_ID = CI.ID
INNER JOIN MATERIA ON MHM.MATERIA_ID = MATERIA.ID
WHERE MHM.ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_PUBLICAR_NOTAS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_PUBLICAR_NOTAS` (
	IN IDCARRERA INT
)
BEGIN
	SET lc_time_names = 'es_VE';
	SELECT CA.ID, CR.NOMBRE AS CARRERA,CI.CODIGO AS CICLO, 
	DATE_FORMAT(CI.FECHAINICIO, '%d de %M, %Y') AS FECHAINICIO, 
    DATE_FORMAT(CI.FECHAFIN, '%d de %M, %Y') AS FECHAFIN, CA.PUBLICA,CA.RESTRINGIR
	FROM CICLOESCOLAR AS CI
	INNER JOIN CICLOACTUAL AS CA ON CI.ID = CA.CICLOESCOLAR_ID
	INNER JOIN CARRERA AS CR ON CA.CARRERA_ID = CR.ID
	WHERE CR.ID = IDCARRERA LIMIT 5;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_UPDATE_PUBLICAR
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_UPDATE_PUBLICAR` (
	IN _ID INT,
    IN VALOR SMALLINT
)
BEGIN
	UPDATE CICLOACTUAL SET PUBLICA = VALOR WHERE ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_MY_SUBJECTS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_MY_SUBJECTS` (
 IN idAlumno INT
)
BEGIN
	SELECT M.ID, 
	(CASE WHEN P.AMATERNO IS NOT NULL 
		THEN CONCAT(P.NOMBRE,' ',P.APATERNO,' ',P.AMATERNO)
		ELSE CONCAT(P.NOMBRE,' ',P.APATERNO) END
	) AS ALUMNO, P.USERNAME AS MATRICULA,
	M.NOMBRE AS MATERIA, C.NOMBRE AS CARRERA, S.NOMBRE AS SEMESTRE,
	T.NOMBRE AS TURNO
	FROM MATERIA AS M
	INNER JOIN CARRERA AS C ON M.CARRERA_ID = C.ID
	INNER JOIN SEMESTRE S ON M.SEMESTRE_ID = S.ID
	INNER JOIN ALUMNO AS A ON M.SEMESTRE_ID = A.SEMESTRE_ID AND A.CARRERA_ID = C.ID
	INNER JOIN PERSONA AS P ON A.PERSONA_ID = P.ID
	INNER JOIN TURNO AS T ON A.TURNO_ID = T.ID
	WHERE A.ID = idAlumno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_VIEW_CALIFICACION
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_VIEW_CALIFICACION` (
	IN idAlumno INT,
    IN idCiclo INT,
    IN idSemestre INT
)
BEGIN    
    SELECT M.NOMBRE AS MATERIA, C.PSEMESTRE, C.SSEMESTRE, C.TSEMESTR, C.TOTAL,
	( CASE WHEN C.PASO = 0 THEN 'NO' ELSE 'SI' END) AS PASO, C.SIGLAS, C.SIGNIFICADO
	FROM CALIFICACION AS C
	INNER JOIN ALUMNO_HAS_MATERIA AS AHM ON C.ALUMNO_HAS_MATERIA_ID = AHM.ID
	INNER JOIN MAESTRO_HAS_MATERIA AS MHM ON AHM.MAESTRO_HAS_MATERIA_ID = MHM.ID
	INNER JOIN MATERIA AS M ON MHM.MATERIA_ID = M.ID AND MHM.MATERIA_CARRERA_ID = M.CARRERA_ID
	INNER JOIN ALUMNO AS A ON AHM.ALUMNO_ID = A.ID
	INNER JOIN SEMESTRE AS S ON A.SEMESTRE_ID = S.ID
	WHERE AHM.ALUMNO_ID = idAlumno AND MHM.CICLOESCOLAR_ID = idCiclo AND S.ID = idSemestre
	UNION ALL
	SELECT 'TOTALES' AS MATERIA, TRUNCATE((SUM(C0.PSEMESTRE)/N), 2), TRUNCATE((SUM(C0.SSEMESTRE)/N), 2), 
	TRUNCATE((SUM(C0.TSEMESTR)/N),2), TRUNCATE((SUM(C0.TOTAL)/N), 2),'' AS PASO, '' AS SIGLAS, '' AS SIGNIFICADO
	FROM CALIFICACION AS C0
	INNER JOIN ALUMNO_HAS_MATERIA AS AHM0 ON C0.ALUMNO_HAS_MATERIA_ID = AHM0.ID
	INNER JOIN MAESTRO_HAS_MATERIA AS MHM0 ON AHM0.MAESTRO_HAS_MATERIA_ID = MHM0.ID
	INNER JOIN MATERIA AS M0 ON MHM0.MATERIA_ID = M0.ID AND MHM0.MATERIA_CARRERA_ID = M0.CARRERA_ID
	INNER JOIN ALUMNO AS A0 ON AHM0.ALUMNO_ID = A0.ID
	INNER JOIN SEMESTRE AS S0 ON A0.SEMESTRE_ID = S0.ID
	INNER JOIN (
		SELECT COUNT(*) N, AHM1.ALUMNO_ID
		FROM CALIFICACION AS C1
		INNER JOIN ALUMNO_HAS_MATERIA AS AHM1 ON C1.ALUMNO_HAS_MATERIA_ID = AHM1.ID
		INNER JOIN MAESTRO_HAS_MATERIA AS MHM1 ON AHM1.MAESTRO_HAS_MATERIA_ID = MHM1.ID
		INNER JOIN MATERIA AS M1 ON MHM1.MATERIA_ID = M1.ID AND MHM1.MATERIA_CARRERA_ID = M1.CARRERA_ID
		INNER JOIN ALUMNO AS A1 ON AHM1.ALUMNO_ID = A1.ID
		INNER JOIN SEMESTRE AS S1 ON A1.SEMESTRE_ID = S1.ID
		WHERE AHM1.ALUMNO_ID = idAlumno AND MHM1.CICLOESCOLAR_ID = idCiclo AND S1.ID = idSemestre GROUP BY AHM1.ALUMNO_ID
	) AS NUM
	 ON AHM0.ALUMNO_ID = NUM.ALUMNO_ID
	WHERE AHM0.ALUMNO_ID = idAlumno AND MHM0.CICLOESCOLAR_ID = idCiclo AND S0.ID = idSemestre GROUP BY AHM0.ALUMNO_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PS_ALLOW_NOTAS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `PS_ALLOW_NOTAS` (
	IN idAlumno INT
)
BEGIN
SELECT CA.PUBLICA, CA.CICLOESCOLAR_ID, A.SEMESTRE_ID FROM ALUMNO AS A
INNER JOIN CARRERA AS C ON A.CARRERA_ID = C.ID
INNER JOIN CICLOACTUAL AS CA ON C.ID = CA.CARRERA_ID
WHERE A.ID = idAlumno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_LIST_ALUMNS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_LIST_ALUMNS`(
	IN aMatricula VARCHAR(100),
    IN aNombre VARCHAR(50),
    IN aApellido VARCHAR(50),
    IN idCarrera INT
)
BEGIN
	IF aMatricula IS NULL AND aApellido IS NULL
    THEN
		SELECT A.ID,P.USERNAME AS MATRICULA,P.NOMBRE,P.SNOMBRE AS SEGUNDO_NOMBRE,P.APATERNO AS PATERNO,P.AMATERNO AS MATERNO,P.VALIDO
		FROM PERSONA AS P
		INNER JOIN ALUMNO AS A ON P.ID = A.PERSONA_ID
		WHERE A.CARRERA_ID = idCarrera AND P.NOMBRE LIKE aNombre;
    ELSEIF aMatricula IS NULL AND aApellido IS NOT NULL
    THEN
		SELECT A.ID,P.USERNAME AS MATRICULA,P.NOMBRE,P.SNOMBRE AS SEGUNDO_NOMBRE,P.APATERNO AS PATERNO,P.AMATERNO AS MATERNO,P.VALIDO
		FROM PERSONA AS P
		INNER JOIN ALUMNO AS A ON P.ID = A.PERSONA_ID
		WHERE A.CARRERA_ID = idCarrera AND P.NOMBRE LIKE aNombre AND P.APATERNO LIKE aApellido;
	ELSEIF aMatricula IS NOT NULL AND aApellido IS NULL
    THEN
		SELECT A.ID,P.USERNAME AS MATRICULA,P.NOMBRE,P.SNOMBRE AS SEGUNDO_NOMBRE,P.APATERNO AS PATERNO,P.AMATERNO AS MATERNO,P.VALIDO
		FROM PERSONA AS P
		INNER JOIN ALUMNO AS A ON P.ID = A.PERSONA_ID
		WHERE A.CARRERA_ID = idCarrera AND P.USERNAME LIKE aMatricula AND P.NOMBRE LIKE aNombre;
	ELSEIF aMatricula IS NOT NULL AND aApellido IS NOT NULL
    THEN 
		SELECT A.ID,P.USERNAME AS MATRICULA,P.NOMBRE,P.SNOMBRE AS SEGUNDO_NOMBRE,P.APATERNO AS PATERNO,P.AMATERNO AS MATERNO,P.VALIDO
		FROM PERSONA AS P
		INNER JOIN ALUMNO AS A ON P.ID = A.PERSONA_ID
		WHERE A.CARRERA_ID = idCarrera AND P.USERNAME LIKE aMatricula AND P.NOMBRE LIKE aNombre AND P.APATERNO LIKE aApellido;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_RESTRINGIR_NOTAS
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_RESTRINGIR_NOTAS` (
	IN idCarrera INT,
    IN valor INT
)
BEGIN
	UPDATE CICLOACTUAL SET RESTRINGIR = valor WHERE CARRERA_ID = idCarrera;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ALLOW_ASIGNAR
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_ALLOW_ASIGNAR` (
	IN idMateria INT
)
BEGIN
	SELECT C.RESTRINGIR FROM CICLOACTUAL AS C
	INNER JOIN MATERIA AS M ON C.CARRERA_ID = M.CARRERA_ID
	WHERE M.ID = idMateria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_CONTROL
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_CONTROL`(
	IN id VARCHAR(100)
)
BEGIN
	DECLARE _ID INT;
    SELECT C.ID INTO _ID FROM PERSONA AS C WHERE C.USERNAME = id; 
    
    DELETE FROM CONTROLESCOLAR WHERE CONTROLESCOLAR.PERSONA_ID = _ID;
    
    DELETE FROM PERSONA WHERE PERSONA.ID = _ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_CONTROLES
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_GET_CONTROLES`(
	IN _MATRICULA VARCHAR(100),
    IN _NOMBRE VARCHAR(50),
    IN _APELLIDO VARCHAR(50),
    IN _IDCARRERA INT
)
BEGIN
	IF _MATRICULA IS NOT NULL AND _APELLIDO IS NOT NULL
    THEN
		SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN CONTROLESCOLAR AS M
		ON P.ID = M.PERSONA_ID
		WHERE M.CARRERA_ID =_IDCARRERA AND P.USERNAME LIKE _MATRICULA AND P.NOMBRE LIKE _NOMBRE AND P.APATERNO LIKE _APELLIDO;
    ELSEIF _MATRICULA IS NULL AND _APELLIDO IS NOT NULL
    THEN
		SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN CONTROLESCOLAR AS M
		ON P.ID = M.PERSONA_ID
		WHERE M.CARRERA_ID =_IDCARRERA AND P.NOMBRE LIKE _NOMBRE AND P.APATERNO LIKE _APELLIDO;
    ELSEIF _MATRICULA IS NOT NULL AND _APELLIDO IS NULL
	THEN
		SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN CONTROLESCOLAR AS M
		ON P.ID = M.PERSONA_ID
		WHERE M.CARRERA_ID =_IDCARRERA AND P.USERNAME LIKE _MATRICULA AND P.NOMBRE LIKE _NOMBRE;
	ELSE
    SELECT P.ID, P.VALIDO, P.USERNAME, P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO
		FROM PERSONA AS P
		INNER JOIN CONTROLESCOLAR AS M
		ON P.ID = M.PERSONA_ID
		WHERE M.CARRERA_ID =_IDCARRERA AND P.NOMBRE LIKE _NOMBRE;
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_EDIT_CONTROL
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_EDIT_CONTROL` (
	IN idRole VARCHAR(100)
)
BEGIN
SELECT P.NOMBRE, P.SNOMBRE, P.APATERNO, P.AMATERNO, P.USERNAME,
P.ID AS P_ID, C.ID AS C_ID
FROM PERSONA AS P
INNER JOIN CONTROLESCOLAR AS C ON P.ID = C.PERSONA_ID
WHERE P.USERNAME = idRole;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_CURRENCT_CICLO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_CURRENCT_CICLO` (
	IN idCarrera INT
)
BEGIN
	SELECT C.ID, C.CODIGO 
    FROM CICLOACTUAL AS CA
    INNER JOIN CICLOESCOLAR AS C
    ON CA.CICLOESCOLAR_ID = C.ID
    WHERE CA.CARRERA_ID =idCarrera;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_HISTORIAL_ACADEMICO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_HISTORIAL_ACADEMICO`(
	IN matricula VARCHAR(100),
    IN idCarrera INT
)
BEGIN

	DECLARE A_S INT;
    DECLARE A_ID INT;
    SELECT A.SEMESTRE_ID, A.ID INTO A_S, A_ID FROM ALUMNO AS A
	INNER JOIN PERSONA AS P ON A.PERSONA_ID = P.ID
    WHERE P.USERNAME = matricula AND a.CARRERA_ID = idCarrera;

	SELECT S.ID,S.NOMBRE AS SEMESTRE, A_ID as A_ID FROM SEMESTRE AS S
	WHERE S.ID <= A_S;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_GET_HISTORIAL
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_GET_HISTORIAL` (
	IN idAlumno INT,
    IN idSemestre INT
)
BEGIN
	SELECT M.NOMBRE AS MATERIA, C.PSEMESTRE, C.SSEMESTRE, C.TSEMESTR, C.TOTAL, (CASE WHEN C.PASO = 0 THEN 'NO' ELSE 'SI' END) AS PASO, C.SIGLAS, C.SIGNIFICADO
	FROM CALIFICACION AS C
	INNER JOIN ALUMNO_has_MATERIA AS AHM ON C.ALUMNO_has_MATERIA_ID = AHM.ID
	INNER JOIN ALUMNO AS A ON AHM.ALUMNO_ID = A.ID
	INNER JOIN MAESTRO_has_MATERIA AS MHM ON AHM.MAESTRO_has_MATERIA_ID = MHM.ID
	INNER JOIN MATERIA AS M ON MHM.MATERIA_ID = M.ID AND MHM.MATERIA_CARRERA_ID = M.CARRERA_ID
	WHERE A.ID = idAlumno AND M.SEMESTRE_ID = idSemestre
	UNION ALL
	SELECT 'TOTALES' AS MATERIA, TRUNCATE(SUM((C1.PSEMESTRE)/N),2), 
    TRUNCATE(SUM((C1.SSEMESTRE)/N),2), TRUNCATE(SUM((C1.TSEMESTR)/N),2), 
    TRUNCATE(SUM((C1.TOTAL)/N),2), '' AS PASO, '' AS SIGLAS, '' AS SIGNIFICADO
	FROM CALIFICACION AS C1
	INNER JOIN ALUMNO_has_MATERIA AS AHM1 ON C1.ALUMNO_has_MATERIA_ID = AHM1.ID
	INNER JOIN ALUMNO AS A1 ON AHM1.ALUMNO_ID = A1.ID
	INNER JOIN MAESTRO_has_MATERIA AS MHM1 ON AHM1.MAESTRO_has_MATERIA_ID = MHM1.ID
	INNER JOIN MATERIA AS M1 ON MHM1.MATERIA_ID = M1.ID AND MHM1.MATERIA_CARRERA_ID = M1.CARRERA_ID
	INNER JOIN (
	SELECT COUNT(*) AS N, A0.ID
	FROM CALIFICACION AS C0
	INNER JOIN ALUMNO_has_MATERIA AS AHM0 ON C0.ALUMNO_has_MATERIA_ID = AHM0.ID
	INNER JOIN ALUMNO AS A0 ON AHM0.ALUMNO_ID = A0.ID
	INNER JOIN MAESTRO_has_MATERIA AS MHM0 ON AHM0.MAESTRO_has_MATERIA_ID = MHM0.ID
	INNER JOIN MATERIA AS M0 ON MHM0.MATERIA_ID = M0.ID AND MHM0.MATERIA_CARRERA_ID = M0.CARRERA_ID
	WHERE A0.ID = idAlumno AND M0.SEMESTRE_ID = idSemestre GROUP BY A0.ID
	) AS NUM ON A1.ID = NUM.ID
	WHERE A1.ID = idAlumno AND M1.SEMESTRE_ID = idSemestre GROUP BY A1.ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_DELETE_MAESTRO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_DELETE_MAESTRO`(
IN id INT,
IN editor VARCHAR(100)
)
BEGIN
	DECLARE idMaestro INT;
    SELECT M.ID INTO idMaestro FROM MAESTRO AS M WHERE M.PERSONA_ID = id;
    UPDATE PERSONA SET PERSONA.VALIDO = 'N', PERSONA.MODIFICADO = NOW(), PERSONA.EDITOR = editor WHERE PERSONA.ID = id;
    UPDATE MAESTRO SET MAESTRO.VALIDO = 'N', MAESTRO.MODIFICADO = NOW(), MAESTRO.EDITOR = editor WHERE MAESTRO.ID = idMaestro;
    UPDATE MAESTRO_HAS_MATERIA SET MAESTRO_HAS_MATERIA.VALIDO = 'N', MAESTRO_HAS_MATERIA.MODIFICADO = NOW() WHERE MAESTRO_HAS_MATERIA.MAESTRO_ID = idMaestro;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ACTIVAR_MAESTRO
-- -----------------------------------------------------

DELIMITER $$
USE `UNEDL`$$
CREATE PROCEDURE `SP_ACTIVAR_MAESTRO` (
	IN id INT,
    IN editor VARCHAR(100)
)
BEGIN
	DECLARE idMaestro INT;
    SELECT M.ID INTO idMaestro FROM MAESTRO AS M WHERE M.PERSONA_ID = id;
    UPDATE PERSONA SET PERSONA.VALIDO = 'Y', PERSONA.MODIFICADO = NOW(), PERSONA.EDITOR = editor WHERE PERSONA.ID = id;
    UPDATE MAESTRO SET MAESTRO.VALIDO = 'Y', MAESTRO.MODIFICADO = NOW(), MAESTRO.EDITOR = editor WHERE MAESTRO.ID = idMaestro;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `UNEDL`.`v_student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `UNEDL`.`v_student`;
USE `UNEDL`;
CREATE  OR REPLACE VIEW `v_student` AS
SELECT (CASE WHEN P.AMATERNO IS NOT NULL
THEN CONCAT(P.NOMBRE,' ',P.APATERNO,' ', P.AMATERNO)
ELSE CONCAT(P.NOMBRE,' ',P.APATERNO ) END) AS NOMBRE,P.SNOMBRE, P.APATERNO, P.AMATERNO,
P.USERNAME AS MATRICULA, C.CODIGO AS CICLO, CR.NOMBRE AS CARRERA, S.NOMBRE AS SEMESTRE,
T.NOMBRE AS TURNO, A.ID
FROM PERSONA AS P
INNER JOIN ALUMNO AS A ON P.ID = A.PERSONA_ID
INNER JOIN CICLOACTUAL AS CA ON A.CARRERA_ID = CA.CARRERA_ID
INNER JOIN CICLOESCOLAR AS C ON CA.CICLOESCOLAR_ID = C.ID
INNER JOIN CARRERA AS CR ON A.CARRERA_ID = CR.ID
INNER JOIN SEMESTRE AS S ON A.SEMESTRE_ID = S.ID
INNER JOIN TURNO AS T ON A.TURNO_ID = T.ID;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

call sp_insert_turno('Matutino','root');
call sp_insert_turno('Vespertino','root');
call sp_insert_turno('Nocturno','root');

CALL SP_INSERT_CODIGO('2017-A','2017-01-01','2017-06-06','root');

call SP_INSERT_CARRERA('Ingeniería','root',1);
call SP_INSERT_CARRERA('Derecho','root',1);
call SP_INSERT_CARRERA('Nutricion','root',1);

call SP_INSERT_SEMESTRE('1ro',6,'root');
call SP_INSERT_SEMESTRE('2do',6,'root');
call SP_INSERT_SEMESTRE('3ro',6,'root');
call SP_INSERT_SEMESTRE('4to',6,'root');
call SP_INSERT_SEMESTRE('5to',6,'root');
call SP_INSERT_SEMESTRE('6to',6,'root');
call SP_INSERT_SEMESTRE('7mo',6,'root');
call SP_INSERT_SEMESTRE('8vo',6,'root');

INSERT INTO `PERSONA` VALUES(1,'UNEDL',NULL,'Universidad',NULL,'Y','2017-07-01 13:31:16','2017-10-16 19:36:51','root','$2a$10$BPzKJdTMdBacdF6ubdP3Yu69V48cHBlWhZahDXDUMzigykQIkTxEm','UNEDL'),(2,'UNEDL',NULL,'Universidad',NULL,'Y','2017-07-30 17:57:30','2017-10-16 19:37:31','root-control','$2a$10$zg26yozCWHHiIGw7IICiMuUt7FOKUmU1.iFaDzn0LM1ozxgtD59Ty','UNEDL');

INSERT INTO `SUPERVISOR` VALUES (1,'2017-07-01 13:31:16','Y','2017-07-01 18:31:16',1,'root');
INSERT INTO `CONTROLESCOLAR` VALUES (1,'2017-07-30 17:57:30','Y','2017-07-30 22:57:30',1,2,'root');

-- Materias primer semestre Ingenieria
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES ('Computacion basica', now(), now(), 'Y', 1, 1, 'root-control'),
('Logica computacional', now(), now(), 'Y', 1, 1, 'root-control'),
('Matematicas Basicas', now(), now(), 'Y', 1, 1, 'root-control'),
('Logica y conjuntos', now(), now(), 'Y', 1, 1, 'root-control'),
('Introduccion a la fisica', now(), now(), 'Y', 1, 1, 'root-control'),
('Entorno social', now(), now(), 'Y', 1, 1, 'root-control'),
('Redaccion I', now(), now(), 'Y', 1, 1, 'root-control');

-- materias de ingenieria segundo semestre
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES
('Matematicas discretas',now(), now(), 'Y', 1, 2, 'root-control'),
('Matematicas I',now(), now(), 'Y', 1, 2, 'root-control'),
('Mecanica',now(), now(), 'Y', 1, 2, 'root-control'),
('Programacion I',now(), now(), 'Y', 1, 2, 'root-control'),
('Taller de Programacion I',now(), now(), 'Y', 1, 2, 'root-control'),
('Redaccion II',now(), now(), 'Y', 1, 2, 'root-control'),
('Ingles', now(), now(), 'Y', 1, 2, 'root-control');

-- materias de ingenieria tercero semestre
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES
('Matematicas II',now(), now(), 'Y', 1, 3, 'root-control'),
('Probabilidad y estadistica', now(), now(), 'Y', 1, 3, 'root-control'),
('Taller de programacion II',now(), now(), 'Y', 1, 3, 'root-control'),
('Estructura de datos',now(), now(), 'Y', 1, 3, 'root-control'),
('Taller de estructura de datos',now(), now(), 'Y', 1, 3, 'root-control'),
('Electromagnetismo',now(), now(), 'Y', 1, 3, 'root-control'),
('Administracion',now(), now(), 'Y', 1, 3, 'root-control'),
('Ingles III',now(), now(), 'Y', 1, 3, 'root-control');

-- materias de ingenieria cuarto semestre
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES ('Matematicas III',now(), now(), 'Y', 1, 4, 'root-control'),
('Metodos numericos',now(), now(), 'Y', 1, 4, 'root-control'),
('Programacion III',now(), now(), 'Y', 1, 4, 'root-control'),
('Taller de programacion III',now(), now(), 'Y', 1, 4, 'root-control'),
('Estructura de archivos',now(), now(), 'Y', 1, 4, 'root-control'),
('Taller de estructura de archivos',now(), now(), 'Y', 1, 4, 'root-control'),
('Sistemas digitales', now(), now(), 'Y', 1, 4, 'root-control'),
('Legislacion informatica', now(), now(), 'Y', 1, 4, 'root-control');

-- materias de ingenieria quinto semestre
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES ('Teoria matematica de la computacion',now(), now(), 'Y', 1, 5, 'root-control'),
('Bases de datos I',now(), now(), 'Y', 1, 5, 'root-control'),
('Taller de bases de datos I',now(), now(), 'Y', 1, 5, 'root-control'),
('Programacion IV',now(), now(), 'Y', 1, 5, 'root-control'),
('Programacion de sistemas',now(), now(), 'Y', 1, 5, 'root-control'),
('Taller de programacion de sistemas',now(), now(), 'Y', 1, 5, 'root-control'),
('Teleinformatica',now(), now(), 'Y', 1, 5, 'root-control'),
('Lenguajes de programacion',now(), now(), 'Y', 1, 5, 'root-control');

-- materias de ingenieria sexto semestre
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES ('Compiladores', now(), now(), 'Y', 1, 6, 'root-control'),
('Bases de datos II', now(), now(), 'Y', 1, 6, 'root-control'),
('Taller de bases de datos II', now(), now(), 'Y', 1, 6, 'root-control'),
('Sistemas operativos I', now(), now(), 'Y', 1, 6, 'root-control'),
('Taller de sistemas operativos I', now(), now(), 'Y', 1, 6, 'root-control'),
('Arquitectura de computadoras', now(), now(), 'Y', 1, 6, 'root-control'),
('Redes de computadora', now(), now(), 'Y', 1, 6, 'root-control'),
('Taller de redes de computadora', now(), now(), 'Y', 1, 6, 'root-control'),
('Contabilidad I', now(), now(), 'Y', 1, 6, 'root-control');

-- materias de ingenieria septimo semestre
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES ('Ingenieria de software I', now(), now(), 'Y', 1, 7, 'root-control'),
('Programacion logica y funcional', now(), now(), 'Y', 1, 7, 'root-control'),
('Sistemas operaivos II', now(), now(), 'Y', 1, 7, 'root-control'),
('Taller de sistemas operaivos II', now(), now(), 'Y', 1, 7, 'root-control'),
('Inteligencia artificial', now(), now(), 'Y', 1, 7, 'root-control'),
('Circuitos', now(), now(), 'Y', 1, 7, 'root-control'),
('Investigacion de operaciones ', now(), now(), 'Y', 1, 7, 'root-control'),
('Calidad', now(), now(), 'Y', 1, 7, 'root-control'),
('Metodologia de la investigacion', now(), now(), 'Y', 1, 7, 'root-control');

-- materias de ingenieria octavo semestre
INSERT INTO MATERIA(NOMBRE,CREADO,MODIFICADO,VALIDO,CARRERA_ID,SEMESTRE_ID,EDITOR)
VALUES ('Ingenieria de software II', now(), now(), 'Y', 1, 8, 'root-control'),
('Grafiacion por computadoras', now(), now(), 'Y', 1, 8, 'root-control'),
('Sistemas expertos', now(), now(), 'Y', 1, 8, 'root-control'),
('Taller de sistemas expertos', now(), now(), 'Y', 1, 8, 'root-control'),
('Seguridad en redes', now(), now(), 'Y', 1, 8, 'root-control'),
('Administracion de centros de computo', now(), now(), 'Y', 1, 8, 'root-control'),
('Auditoria infromatica', now(), now(), 'Y', 1, 8, 'root-control'),
('Seminario de titulacion', now(), now(), 'Y', 1, 8, 'root-control');

-- materias de derecho primer semestre
insert into materia(nombre, creado, modificado, valido, editor, carrera_id, semestre_id)
values('Metodología jurídica', now(), now(), 'Y', 'root', 2, 1),
('Introducción al estudio del Derecho', now(), now(), 'Y', 'root', 2, 1),
('Historia del Derecho', now(), now(), 'Y', 'root', 2, 1),
('Derecho romano', now(), now(), 'Y', 'root', 2, 1),
('Antropologia juridica', now(), now(), 'Y', 'root', 2, 1),
('Lengua extranjera I', now(), now(), 'Y', 'root', 2, 1),
('Desarrollo integral', now(), now(), 'Y', 'root', 2, 1);

-- materias de derecho segundo semestre
insert into materia(nombre, creado, modificado, valido, editor, carrera_id, semestre_id)
values('Sociologia juridica', now(), now(), 'Y', 'root', 2, 2),
('Teoria del estado', now(), now(), 'Y', 'root', 2, 2),
('Teoria general del proceso', now(), now(), 'Y', 'root', 2, 2),
('Teoria del derecho civil', now(), now(), 'Y', 'root', 2, 2),
('Lectura y redaccion juridica(curso/taller)', now(), now(), 'Y', 'root', 2, 2),
('Lengua extranjera II', now(), now(), 'Y', 'root', 2, 2),
('Desarrollo integral', now(), now(), 'Y', 'root', 2, 2);

-- materias de derecho tercer semestre
insert into materia(nombre, creado, modificado, valido, editor, carrera_id, semestre_id)
values('Derecho constitucional', now(), now(), 'Y', 'root', 2, 3),
('Teoria de las obligaciones', now(), now(), 'Y', 'root', 2, 3),
('Derecho procesal civil', now(), now(), 'Y', 'root', 2, 3),
('Teoria general del derecho administrativo', now(), now(), 'Y', 'root', 2, 3),
('Etica juridica', now(), now(), 'Y', 'root', 2, 3),
('Lengua extranjera III', now(), now(), 'Y', 'root', 2, 3),
('Desarrollo integral', now(), now(), 'Y', 'root', 2, 3);
